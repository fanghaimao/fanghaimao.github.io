<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SoulReader</title>
  
  <subtitle>加班狂魔</subtitle>
  <link href="https://fanghaimao.github.io/atom.xml" rel="self"/>
  
  <link href="https://fanghaimao.github.io/"/>
  <updated>2022-07-21T05:58:21.888Z</updated>
  <id>https://fanghaimao.github.io/</id>
  
  <author>
    <name>mfh</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《你不知道javascript》 知识点摘录</title>
    <link href="https://fanghaimao.github.io/2020/11/20/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93javascript%E3%80%8B%20%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    <id>https://fanghaimao.github.io/2020/11/20/%E3%80%8A%E4%BD%A0%E4%B8%8D%E7%9F%A5%E9%81%93javascript%E3%80%8B%20%E8%AF%BB%E5%90%8E%E6%84%9F/</id>
    <published>2020-11-20T01:44:55.000Z</published>
    <updated>2022-07-21T05:58:21.888Z</updated>
    
    <content type="html"><![CDATA[<h4 id="第一部分-类型和语法"><a href="#第一部分-类型和语法" class="headerlink" title="第一部分  类型和语法"></a>第一部分  类型和语法</h4><ul><li><p><code>&amp;&amp;</code> 运算符的优先级高于 <code>||</code>, 而 <code>||</code> 的优先级高于 <code>? :</code>, <code>&amp;&amp;</code> <code>||</code> 是左关联， <code>? :</code> 是右关联</p></li><li><p>在 <code>try...catch...</code>中，如果包含在for循环中，在一定情况下会在i++执行之前执行，如果在<code>try...catch...</code>中，加入<code>yield</code>, 由于<code>yield</code>的特性，try并未结束，因此catch、finally并不会立即执行<br>  <em>finally中的return会覆盖try和catch中的return的返回值</em></p></li><li><p><code>switch</code></p><ul><li><code>switch</code>中的匹配算法是<code>===</code></li><li><code>case</code> 中的表达式尽量不要使用 <code>&amp;&amp; or ||</code>，因为匹配的数值并一定严格相等</li></ul></li></ul><ul><li><p>判断字段类型</p><ul><li><code>typeof</code>  </li><li><code>instanceof</code></li><li><code>Object.prototype.toString.call(obj)</code></li></ul></li><li><p>再给html标签添加<code>id</code>标签的时候回默认添加一个和标签相同名称的全局变量</p></li><li><p>在script标签中是使用javascript语言，如果语句中包含<code>&lt;/script&gt;</code>则会被视为script标签的结束，应该使用<code>&quot;&lt;/sc&quot; + &quot;ript&gt;&quot;</code>来代替</p></li></ul><h4 id="第二部分-异步和性能"><a href="#第二部分-异步和性能" class="headerlink" title="第二部分 异步和性能"></a>第二部分 异步和性能</h4><ul><li><p><strong>尽量避免发送同步的ajax请求，因为这样会锁定浏览器的UI,并且阻塞所用的用户交互</strong></p></li><li><p>javascript从不跨线程共享数据</p></li></ul><h6 id="New-Promise"><a href="#New-Promise" class="headerlink" title="New Promise()"></a>New Promise()</h6><ul><li><p><code>Promise.all()</code><br><code>Promise.all</code>可以将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例，同时，成功和失败的返回值是不同的, 成功的时候返回一个结果数据，失败的时候则最先被<code>reject</code>失败的状态的值</p><p><em>返回的成功的结果的数据顺序和<code>Promise.all</code>接收到的数组顺序是一致的</em><br><strong>如果有一个<code>promise</code>被拒绝， 主Promise.all()就会被立刻拒绝，并丢弃来自其他所有promise的全部结果</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">fun1, fun2</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>([fun1, fun2]).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> values</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> fun1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">2</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> fun2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="number">4</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="title function_">add</span>(fun1, fun2).<span class="title function_">then</span>(<span class="function"><span class="params">values</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values) <span class="comment">// [2, 4]</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>Promise.race</code></p><p><code>Promise.race</code> 竞赛模式 只要传入的数组里面那个结果先出来，就返回哪个结果（不论返回的接口是成功还是失败）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;success&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&#x27;failed&#x27;</span>)</span><br><span class="line">  &#125;, <span class="number">500</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2]).<span class="title function_">then</span>(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(error)  <span class="comment">// 打开的是 &#x27;failed&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>调用Promise的then()时，只传入一个完全处理函数，一个默认拒绝处理函数就会顶替上来，把错误重新抛出，是的错误可以沿着Promise链传递下去，知道遇到显式定义的拒绝处理函数</p></li><li><p><code>Promise.finally</code> 通常用来处理被丢弃或者忽略的promise, 如果有需要释放的资源可以在finally进行释放</p></li><li><p><code>Promise.none</code></p><p>所有的promise都被拒绝才返回</p></li><li><p><code>Promise.any</code></p><p>至少需要一个promise完成就返回</p></li><li><p><code>Promise.first</code></p><p>只要第一个Promise完成，后续任何拒绝和完成都会忽略</p></li><li><p><code>Promise.last</code></p><p>只有最后一个完成的Promise胜出</p></li><li><p>并发迭代 <code>Promise.map</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 封装Promise.map</span></span><br><span class="line"><span class="keyword">if</span>(!<span class="title class_">Promise</span>.<span class="property">map</span>) &#123;</span><br><span class="line">  <span class="title class_">Promise</span>.<span class="property">map</span> = <span class="keyword">function</span>(<span class="params">vals, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">all</span>(</span><br><span class="line">      vals.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>( <span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">          <span class="title function_">cb</span>(val, resolve)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用Promise.map</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">map</span>([p1, p2, p3], <span class="keyword">function</span>(<span class="params">pr, done</span>) &#123;</span><br><span class="line">  promise.<span class="title function_">resolve</span>(pr).<span class="title function_">then</span>(<span class="function">(<span class="params">v</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">done</span>(v * <span class="number">2</span>)</span><br><span class="line">  &#125;, done)</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">(<span class="params">values</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(values)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>try...catch...</code> 不能和<code>Promise</code>连用，<code>try...catch...</code>只有在同步的情况下才能捕捉到异常，任何异步的错误都将无法捕捉到</p></li><li><p>一些无效的使用<code>Promise API</code>: <code>new Promise(null)</code>、 <code>Promise.all()</code>、<code>Promise.race(42)</code></p></li></ul><h6 id="生成器-function-foo"><a href="#生成器-function-foo" class="headerlink" title="生成器 function *foo(){ }"></a>生成器 <code>function *foo()&#123; &#125;</code></h6><ul><li>定义生成器函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// what to do...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>调用生成器函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在此处创建了一个生成器foo</span></span><br><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建一个的迭代器对象，将迭代器对象赋值给了变量it</span></span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">foo</span>(<span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line"><span class="comment">// 调用it.next() 指示生成器从当前的位置继续运行，停留在下一个yield或者生成器结束</span></span><br><span class="line"><span class="keyword">var</span> res = it.<span class="title function_">next</span>()</span><br><span class="line">res.<span class="property">value</span>   <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p>  需要的<code>next()</code> 调用比<code>yield</code>语句多一个，因为第一个<code>next()</code>用来启动一个生成器，并运行到第一个<code>yield</code>处，第二个<code>next()</code>调用完第一个被暂停的<code>yield</code>表达式，第三个<code>next()</code>调用完成第二个<code>yield</code>，依次类推</p><p>  <strong>可以通过next向yield表达式传值</strong></p><p>  <code>yield</code> 和 <code>next()</code>组合起来，在生成器的执行过程中，构成了一个双向消息传递系统</p>  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params">x</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> y = x * (<span class="keyword">yield</span> <span class="string">&quot;hello&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> y</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> it = <span class="title function_">foo</span>(<span class="number">6</span>)  <span class="comment">//初始化一个迭代器 it</span></span><br><span class="line"><span class="keyword">var</span> res = it.<span class="title function_">next</span>()</span><br><span class="line">res.<span class="property">value</span>  <span class="comment">// hello</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = it.<span class="title function_">next</span>(<span class="number">7</span>)</span><br><span class="line">res.<span class="property">value</span>  <span class="comment">// 42</span></span><br></pre></td></tr></table></figure><p>  最后一个<code>next()</code>由<code>return</code>来回答 <code>value</code>为<code>return</code> 出来的值，如果生成器中没有<code>return</code>，会有一个假定的，隐式的<code>return</code>，会在默认的情况下回答最后的<code>next()</code>调用提出的问题</p><ul><li><p>多个迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> *<span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> x = <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">  z++</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(z, <span class="string">&#x27;z&#x27;</span>)</span><br><span class="line">  <span class="keyword">var</span> y = <span class="keyword">yield</span> (x * z)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(x,y,z)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> z = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> it1 = <span class="title function_">foo</span>()  <span class="comment">// 第一个迭代器</span></span><br><span class="line"><span class="keyword">var</span> it2 = <span class="title function_">foo</span>()  <span class="comment">// 第二个迭代器</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val1 = it1.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line"><span class="keyword">var</span> val2 = it2.<span class="title function_">next</span>().<span class="property">value</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(val1, val2, <span class="string">&quot;val1, val2&quot;</span>)</span><br><span class="line"></span><br><span class="line">val1 = it1.<span class="title function_">next</span>(val2 * <span class="number">10</span>).<span class="property">value</span></span><br><span class="line">val2 = it2.<span class="title function_">next</span>(val1 * <span class="number">5</span>).<span class="property">value</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(val1, val2, <span class="string">&quot;val1, val2, two&quot;</span>)</span><br><span class="line"></span><br><span class="line">it1.<span class="title function_">next</span>(val2 / <span class="number">2</span>)</span><br><span class="line">it2.<span class="title function_">next</span>(val1 / <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// console</span></span><br><span class="line"><span class="comment">// 2 2 val1, val2</span></span><br><span class="line"><span class="comment">// 2 z</span></span><br><span class="line"><span class="comment">// 3 z</span></span><br><span class="line"><span class="comment">// 40 600 val1, val2, two</span></span><br><span class="line"><span class="comment">// 20 300 3</span></span><br><span class="line"><span class="comment">// 200 10 3</span></span><br></pre></td></tr></table></figure><p><em>多个迭代器交互的时候，生成器中包含有全局变量时，会对全局变量造成污染</em></p><p><strong>可以用于记录函数生成的最后一个值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> something = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> nextVal</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    [<span class="title class_">Symbol</span>.<span class="property">interator</span>]: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">next</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">if</span>(nextVal === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        nextVal = <span class="number">1</span></span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        nextVal = (<span class="number">3</span> * nextVal) + <span class="number">6</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> &#123;<span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: nextVal&#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// 1</span></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// 9</span></span><br><span class="line">something.<span class="title function_">next</span>().<span class="property">value</span> <span class="comment">// 33</span></span><br></pre></td></tr></table></figure><p><code>es6</code>新增了一个<code>for ... of ...</code>循环，意味着可以通过原生循环语法自动贴袋标准迭代器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> v <span class="keyword">of</span> something) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(v)</span><br><span class="line">  <span class="keyword">if</span>(v &gt; <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>终止生成器</p><p><code>for ... of ...</code> 循环内的break会触发finally语句，终止生成器，也可以在外部调用<code>it.return(..)</code>手动终止生成器的迭代器实例</p><p>调用<code>it.return</code>之后会立刻终止生成器，运行finally语句</p></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;第一部分-类型和语法&quot;&gt;&lt;a href=&quot;#第一部分-类型和语法&quot; class=&quot;headerlink&quot; title=&quot;第一部分  类型和语法&quot;&gt;&lt;/a&gt;第一部分  类型和语法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt; 运算符</summary>
      
    
    
    
    
    <category term="读后感" scheme="https://fanghaimao.github.io/tags/%E8%AF%BB%E5%90%8E%E6%84%9F/"/>
    
  </entry>
  
</feed>
